import 'package:flutter/material.dart';
import 'package:speech_to_text/speech_to_text.dart' as stt;
import 'package:flutter_tts/flutter_tts.dart';
import 'package:avatar_glow/avatar_glow.dart';
import 'package:flutter_localizations/flutter_localizations.dart';

void main() {
  runApp(VoiceCalculatorApp());
}

class VoiceCalculatorApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Voice Calculator',
      theme: ThemeData(
        primarySwatch: Colors.green,
        visualDensity: VisualDensity.adaptivePlatformDensity,
        fontFamily: 'Roboto',
      ),
      darkTheme: ThemeData(
        brightness: Brightness.dark,
        primarySwatch: Colors.green,
        visualDensity: VisualDensity.adaptivePlatformDensity,
        fontFamily: 'Roboto',
      ),
      supportedLocales: [
        const Locale('en', ''),
        const Locale('es', ''),
        const Locale('fr', ''),
      ],
      localizationsDelegates: [
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
      ],
      home: CalculatorHome(),
    );
  }
}

class CalculatorHome extends StatefulWidget {
  @override
  _CalculatorHomeState createState() => _CalculatorHomeState();
}

class _CalculatorHomeState extends State<CalculatorHome> {
  late stt.SpeechToText _speech;
  bool _isListening = false;
  String _text = 'Press the button and start speaking';
  final FlutterTts _flutterTts = FlutterTts();
  List<String> _history = [];
  bool _isDarkMode = false;

  @override
  void initState() {
    super.initState();
    _speech = stt.SpeechToText();
    _initializeTts();
  }

  void _initializeTts() {
    _flutterTts.setStartHandler(() {
      setState(() {
        print("Playing");
      });
    });

    _flutterTts.setCompletionHandler(() {
      setState(() {
        print("Complete");
      });
    });

    _flutterTts.setErrorHandler((msg) {
      setState(() {
        print("error: $msg");
      });
    });
  }

  void _toggleTheme() {
    setState(() {
      _isDarkMode = !_isDarkMode;
    });
  }

  void _calculateAndSpeak(String text) {
    final numbers = RegExp(r'\d+').allMatches(text).map((m) => int.parse(m.group(0) ?? '0')).toList();
    final operators = RegExp(r'plus|minus|multiplied by|divided by').allMatches(text).map((m) => m.group(0)).toList();

    if (numbers.isEmpty) {
      _speak('No numbers detected. Please try again.');
      return;
    }

    if (operators.length != numbers.length - 1) {
      _speak('Invalid expression. Please try again.');
      return;
    }

    num result = numbers[0];
    String calculation = '${numbers[0]}';

    for (int i = 0; i < operators.length; i++) {
      final operator = operators[i];
      final number = numbers[i + 1];

      if (operator == 'plus') {
        result += number;
        calculation += ' + $number';
      } else if (operator == 'minus') {
        result -= number;
        calculation += ' - $number';
      } else if (operator == 'multiplied by') {
        result *= number;
        calculation += ' * $number';
      } else if (operator == 'divided by') {
        result /= number;
        calculation += ' / $number';
      }
    }

    final formattedResult = result.toStringAsFixed(2);
    _history.add('$calculation = $formattedResult');
    setState(() {
      _text = '$calculation = $formattedResult';
    });
    _speak('The result is $formattedResult');
  }

  void _speak(String text) async {
    await _flutterTts.speak(text);
  }

  void _startListening() async {
    if (!_isListening) {
      bool available = await _speech.initialize();
      if (available) {
        setState(() => _isListening = true);
        _speech.listen(
          onResult: (val) => setState(() {
            _calculateAndSpeak(val.recognizedWords);
          }),
        );
      }
    } else {
      setState(() => _isListening = false);
      _speech.stop();
    }
  }

  void _clearHistory() {
    setState(() {
      _history.clear();
    });
  }

  void _showHelpDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('How to Use'),
        content: SingleChildScrollView(
          child: ListBody(
            children: <Widget>[
              Text('Speak numbers and the operations to perform calculations.'),
              Text('For example:'),
              Text('- "two plus three"'),
              Text('- "five minus two multiplied by three"'),
              Text('- "ten divided by five"'),
              Text('Say "clear" to reset the calculator.'),
            ],
          ),
        ),
        actions: <Widget>[
          TextButton(
            child: Text('Close'),
            onPressed: () {
              Navigator.of(context).pop();
            },
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _flutterTts.stop();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Voice Calculator'),
        actions: [
          IconButton(
            icon: Icon(Icons.help_outline),
            onPressed: _showHelpDialog,
          ),
          IconButton(
            icon: Icon(Icons.history),
            onPressed: () {
              showModalBottomSheet(
                context: context,
                builder: (context) => ListView.builder(
                  itemCount: _history.length,
                  itemBuilder: (context, index) => ListTile(
                    title: Text(_history[index]),
                  ),
                ),
              );
            },
          ),
          IconButton(
            icon: Icon(Icons.clear),
            onPressed: _clearHistory,
          ),
          IconButton(
            icon: Icon(_isDarkMode ? Icons.wb_sunny : Icons.nightlight_round),
            onPressed: _toggleTheme,
          ),
        ],
        centerTitle: true,
      ),
      floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,
      floatingActionButton: AvatarGlow(
        animate: _isListening,
        glowColor: Theme.of(context).primaryColor,
        endRadius: 80.0,
        duration: const Duration(milliseconds: 2000),
        repeatPauseDuration: const Duration(milliseconds: 100),
        repeat: true,
        child: FloatingActionButton(
          onPressed: _startListening,
          child: Icon(_isListening ? Icons.mic : Icons.mic_none),
        ),
      ),
      body: SingleChildScrollView(
        reverse: true,
        child: Container(
          padding: const EdgeInsets.fromLTRB(20.0, 20.0, 20.0, 150.0),
          child: Text(
            _text,
            style: TextStyle(
              fontSize: 32.0,
              color: Colors.black,
              fontWeight: FontWeight.w400,
            ),
          ),
        ),
      ),
    );
  }
}