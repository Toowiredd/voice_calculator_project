/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ParsedKeywordService } from "../parsedKeyword.service";
import { ParsedKeywordCreateInput } from "./ParsedKeywordCreateInput";
import { ParsedKeyword } from "./ParsedKeyword";
import { ParsedKeywordFindManyArgs } from "./ParsedKeywordFindManyArgs";
import { ParsedKeywordWhereUniqueInput } from "./ParsedKeywordWhereUniqueInput";
import { ParsedKeywordUpdateInput } from "./ParsedKeywordUpdateInput";

export class ParsedKeywordControllerBase {
  constructor(protected readonly service: ParsedKeywordService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ParsedKeyword })
  async createParsedKeyword(
    @common.Body() data: ParsedKeywordCreateInput
  ): Promise<ParsedKeyword> {
    return await this.service.createParsedKeyword({
      data: data,
      select: {
        createdAt: true,
        id: true,
        keyword: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ParsedKeyword] })
  @ApiNestedQuery(ParsedKeywordFindManyArgs)
  async parsedKeywords(
    @common.Req() request: Request
  ): Promise<ParsedKeyword[]> {
    const args = plainToClass(ParsedKeywordFindManyArgs, request.query);
    return this.service.parsedKeywords({
      ...args,
      select: {
        createdAt: true,
        id: true,
        keyword: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ParsedKeyword })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async parsedKeyword(
    @common.Param() params: ParsedKeywordWhereUniqueInput
  ): Promise<ParsedKeyword | null> {
    const result = await this.service.parsedKeyword({
      where: params,
      select: {
        createdAt: true,
        id: true,
        keyword: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ParsedKeyword })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateParsedKeyword(
    @common.Param() params: ParsedKeywordWhereUniqueInput,
    @common.Body() data: ParsedKeywordUpdateInput
  ): Promise<ParsedKeyword | null> {
    try {
      return await this.service.updateParsedKeyword({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          keyword: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ParsedKeyword })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteParsedKeyword(
    @common.Param() params: ParsedKeywordWhereUniqueInput
  ): Promise<ParsedKeyword | null> {
    try {
      return await this.service.deleteParsedKeyword({
        where: params,
        select: {
          createdAt: true,
          id: true,
          keyword: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
