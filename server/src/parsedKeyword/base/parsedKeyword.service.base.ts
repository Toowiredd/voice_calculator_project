/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ParsedKeyword as PrismaParsedKeyword } from "@prisma/client";

export class ParsedKeywordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ParsedKeywordCountArgs, "select">
  ): Promise<number> {
    return this.prisma.parsedKeyword.count(args);
  }

  async parsedKeywords<T extends Prisma.ParsedKeywordFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParsedKeywordFindManyArgs>
  ): Promise<PrismaParsedKeyword[]> {
    return this.prisma.parsedKeyword.findMany<Prisma.ParsedKeywordFindManyArgs>(
      args
    );
  }
  async parsedKeyword<T extends Prisma.ParsedKeywordFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParsedKeywordFindUniqueArgs>
  ): Promise<PrismaParsedKeyword | null> {
    return this.prisma.parsedKeyword.findUnique(args);
  }
  async createParsedKeyword<T extends Prisma.ParsedKeywordCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParsedKeywordCreateArgs>
  ): Promise<PrismaParsedKeyword> {
    return this.prisma.parsedKeyword.create<T>(args);
  }
  async updateParsedKeyword<T extends Prisma.ParsedKeywordUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParsedKeywordUpdateArgs>
  ): Promise<PrismaParsedKeyword> {
    return this.prisma.parsedKeyword.update<T>(args);
  }
  async deleteParsedKeyword<T extends Prisma.ParsedKeywordDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParsedKeywordDeleteArgs>
  ): Promise<PrismaParsedKeyword> {
    return this.prisma.parsedKeyword.delete(args);
  }
}
