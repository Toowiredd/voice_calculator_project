/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ParsedKeyword } from "./ParsedKeyword";
import { ParsedKeywordCountArgs } from "./ParsedKeywordCountArgs";
import { ParsedKeywordFindManyArgs } from "./ParsedKeywordFindManyArgs";
import { ParsedKeywordFindUniqueArgs } from "./ParsedKeywordFindUniqueArgs";
import { CreateParsedKeywordArgs } from "./CreateParsedKeywordArgs";
import { UpdateParsedKeywordArgs } from "./UpdateParsedKeywordArgs";
import { DeleteParsedKeywordArgs } from "./DeleteParsedKeywordArgs";
import { ParsedKeywordService } from "../parsedKeyword.service";
@graphql.Resolver(() => ParsedKeyword)
export class ParsedKeywordResolverBase {
  constructor(protected readonly service: ParsedKeywordService) {}

  async _parsedKeywordsMeta(
    @graphql.Args() args: ParsedKeywordCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ParsedKeyword])
  async parsedKeywords(
    @graphql.Args() args: ParsedKeywordFindManyArgs
  ): Promise<ParsedKeyword[]> {
    return this.service.parsedKeywords(args);
  }

  @graphql.Query(() => ParsedKeyword, { nullable: true })
  async parsedKeyword(
    @graphql.Args() args: ParsedKeywordFindUniqueArgs
  ): Promise<ParsedKeyword | null> {
    const result = await this.service.parsedKeyword(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ParsedKeyword)
  async createParsedKeyword(
    @graphql.Args() args: CreateParsedKeywordArgs
  ): Promise<ParsedKeyword> {
    return await this.service.createParsedKeyword({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ParsedKeyword)
  async updateParsedKeyword(
    @graphql.Args() args: UpdateParsedKeywordArgs
  ): Promise<ParsedKeyword | null> {
    try {
      return await this.service.updateParsedKeyword({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ParsedKeyword)
  async deleteParsedKeyword(
    @graphql.Args() args: DeleteParsedKeywordArgs
  ): Promise<ParsedKeyword | null> {
    try {
      return await this.service.deleteParsedKeyword(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
