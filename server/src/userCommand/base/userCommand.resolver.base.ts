/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserCommand } from "./UserCommand";
import { UserCommandCountArgs } from "./UserCommandCountArgs";
import { UserCommandFindManyArgs } from "./UserCommandFindManyArgs";
import { UserCommandFindUniqueArgs } from "./UserCommandFindUniqueArgs";
import { CreateUserCommandArgs } from "./CreateUserCommandArgs";
import { UpdateUserCommandArgs } from "./UpdateUserCommandArgs";
import { DeleteUserCommandArgs } from "./DeleteUserCommandArgs";
import { UserCommandService } from "../userCommand.service";
@graphql.Resolver(() => UserCommand)
export class UserCommandResolverBase {
  constructor(protected readonly service: UserCommandService) {}

  async _userCommandsMeta(
    @graphql.Args() args: UserCommandCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserCommand])
  async userCommands(
    @graphql.Args() args: UserCommandFindManyArgs
  ): Promise<UserCommand[]> {
    return this.service.userCommands(args);
  }

  @graphql.Query(() => UserCommand, { nullable: true })
  async userCommand(
    @graphql.Args() args: UserCommandFindUniqueArgs
  ): Promise<UserCommand | null> {
    const result = await this.service.userCommand(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserCommand)
  async createUserCommand(
    @graphql.Args() args: CreateUserCommandArgs
  ): Promise<UserCommand> {
    return await this.service.createUserCommand({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UserCommand)
  async updateUserCommand(
    @graphql.Args() args: UpdateUserCommandArgs
  ): Promise<UserCommand | null> {
    try {
      return await this.service.updateUserCommand({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserCommand)
  async deleteUserCommand(
    @graphql.Args() args: DeleteUserCommandArgs
  ): Promise<UserCommand | null> {
    try {
      return await this.service.deleteUserCommand(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
