/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, UserCommand as PrismaUserCommand } from "@prisma/client";

export class UserCommandServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserCommandCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userCommand.count(args);
  }

  async userCommands<T extends Prisma.UserCommandFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserCommandFindManyArgs>
  ): Promise<PrismaUserCommand[]> {
    return this.prisma.userCommand.findMany<Prisma.UserCommandFindManyArgs>(
      args
    );
  }
  async userCommand<T extends Prisma.UserCommandFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserCommandFindUniqueArgs>
  ): Promise<PrismaUserCommand | null> {
    return this.prisma.userCommand.findUnique(args);
  }
  async createUserCommand<T extends Prisma.UserCommandCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserCommandCreateArgs>
  ): Promise<PrismaUserCommand> {
    return this.prisma.userCommand.create<T>(args);
  }
  async updateUserCommand<T extends Prisma.UserCommandUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserCommandUpdateArgs>
  ): Promise<PrismaUserCommand> {
    return this.prisma.userCommand.update<T>(args);
  }
  async deleteUserCommand<T extends Prisma.UserCommandDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserCommandDeleteArgs>
  ): Promise<PrismaUserCommand> {
    return this.prisma.userCommand.delete(args);
  }
}
