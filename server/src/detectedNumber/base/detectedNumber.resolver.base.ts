/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DetectedNumber } from "./DetectedNumber";
import { DetectedNumberCountArgs } from "./DetectedNumberCountArgs";
import { DetectedNumberFindManyArgs } from "./DetectedNumberFindManyArgs";
import { DetectedNumberFindUniqueArgs } from "./DetectedNumberFindUniqueArgs";
import { CreateDetectedNumberArgs } from "./CreateDetectedNumberArgs";
import { UpdateDetectedNumberArgs } from "./UpdateDetectedNumberArgs";
import { DeleteDetectedNumberArgs } from "./DeleteDetectedNumberArgs";
import { DetectedNumberService } from "../detectedNumber.service";
@graphql.Resolver(() => DetectedNumber)
export class DetectedNumberResolverBase {
  constructor(protected readonly service: DetectedNumberService) {}

  async _detectedNumbersMeta(
    @graphql.Args() args: DetectedNumberCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DetectedNumber])
  async detectedNumbers(
    @graphql.Args() args: DetectedNumberFindManyArgs
  ): Promise<DetectedNumber[]> {
    return this.service.detectedNumbers(args);
  }

  @graphql.Query(() => DetectedNumber, { nullable: true })
  async detectedNumber(
    @graphql.Args() args: DetectedNumberFindUniqueArgs
  ): Promise<DetectedNumber | null> {
    const result = await this.service.detectedNumber(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DetectedNumber)
  async createDetectedNumber(
    @graphql.Args() args: CreateDetectedNumberArgs
  ): Promise<DetectedNumber> {
    return await this.service.createDetectedNumber({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DetectedNumber)
  async updateDetectedNumber(
    @graphql.Args() args: UpdateDetectedNumberArgs
  ): Promise<DetectedNumber | null> {
    try {
      return await this.service.updateDetectedNumber({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DetectedNumber)
  async deleteDetectedNumber(
    @graphql.Args() args: DeleteDetectedNumberArgs
  ): Promise<DetectedNumber | null> {
    try {
      return await this.service.deleteDetectedNumber(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
