/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DetectedContext } from "./DetectedContext";
import { DetectedContextCountArgs } from "./DetectedContextCountArgs";
import { DetectedContextFindManyArgs } from "./DetectedContextFindManyArgs";
import { DetectedContextFindUniqueArgs } from "./DetectedContextFindUniqueArgs";
import { CreateDetectedContextArgs } from "./CreateDetectedContextArgs";
import { UpdateDetectedContextArgs } from "./UpdateDetectedContextArgs";
import { DeleteDetectedContextArgs } from "./DeleteDetectedContextArgs";
import { DetectedContextService } from "../detectedContext.service";
@graphql.Resolver(() => DetectedContext)
export class DetectedContextResolverBase {
  constructor(protected readonly service: DetectedContextService) {}

  async _detectedContextsMeta(
    @graphql.Args() args: DetectedContextCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DetectedContext])
  async detectedContexts(
    @graphql.Args() args: DetectedContextFindManyArgs
  ): Promise<DetectedContext[]> {
    return this.service.detectedContexts(args);
  }

  @graphql.Query(() => DetectedContext, { nullable: true })
  async detectedContext(
    @graphql.Args() args: DetectedContextFindUniqueArgs
  ): Promise<DetectedContext | null> {
    const result = await this.service.detectedContext(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DetectedContext)
  async createDetectedContext(
    @graphql.Args() args: CreateDetectedContextArgs
  ): Promise<DetectedContext> {
    return await this.service.createDetectedContext({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DetectedContext)
  async updateDetectedContext(
    @graphql.Args() args: UpdateDetectedContextArgs
  ): Promise<DetectedContext | null> {
    try {
      return await this.service.updateDetectedContext({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DetectedContext)
  async deleteDetectedContext(
    @graphql.Args() args: DeleteDetectedContextArgs
  ): Promise<DetectedContext | null> {
    try {
      return await this.service.deleteDetectedContext(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
