/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DetectedContextService } from "../detectedContext.service";
import { DetectedContextCreateInput } from "./DetectedContextCreateInput";
import { DetectedContext } from "./DetectedContext";
import { DetectedContextFindManyArgs } from "./DetectedContextFindManyArgs";
import { DetectedContextWhereUniqueInput } from "./DetectedContextWhereUniqueInput";
import { DetectedContextUpdateInput } from "./DetectedContextUpdateInput";

export class DetectedContextControllerBase {
  constructor(protected readonly service: DetectedContextService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DetectedContext })
  async createDetectedContext(
    @common.Body() data: DetectedContextCreateInput
  ): Promise<DetectedContext> {
    return await this.service.createDetectedContext({
      data: data,
      select: {
        contextType: true,
        contextValue: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DetectedContext] })
  @ApiNestedQuery(DetectedContextFindManyArgs)
  async detectedContexts(
    @common.Req() request: Request
  ): Promise<DetectedContext[]> {
    const args = plainToClass(DetectedContextFindManyArgs, request.query);
    return this.service.detectedContexts({
      ...args,
      select: {
        contextType: true,
        contextValue: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DetectedContext })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async detectedContext(
    @common.Param() params: DetectedContextWhereUniqueInput
  ): Promise<DetectedContext | null> {
    const result = await this.service.detectedContext({
      where: params,
      select: {
        contextType: true,
        contextValue: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DetectedContext })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDetectedContext(
    @common.Param() params: DetectedContextWhereUniqueInput,
    @common.Body() data: DetectedContextUpdateInput
  ): Promise<DetectedContext | null> {
    try {
      return await this.service.updateDetectedContext({
        where: params,
        data: data,
        select: {
          contextType: true,
          contextValue: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DetectedContext })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDetectedContext(
    @common.Param() params: DetectedContextWhereUniqueInput
  ): Promise<DetectedContext | null> {
    try {
      return await this.service.deleteDetectedContext({
        where: params,
        select: {
          contextType: true,
          contextValue: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
